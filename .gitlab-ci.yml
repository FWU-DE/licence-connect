stages:
  - build
  - test
  - docker
  - deploy

variables:
  MAVEN_IMAGE: maven:3-amazoncorretto-21
  MAVEN_LOCAL_REPO: ".m2/repository"
  MAVEN_OPTS: "-Dmaven.repo.local=$MAVEN_LOCAL_REPO -Djava.awt.headless=true"
  MAVEN_CLI_OPTS: "--settings mvn_ci_settings.xml --batch-mode --errors --fail-at-end"

  # `api` is intentionally inserted literally here. If we used $CI_PROJECT_NAME,
  # it would be uppercased (API), which docker does not accept for image names.
  API_RELEASE_IMAGE: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/api:latest
  LC_HALT_RELEASE_IMAGE: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/api/lc-halt:latest

  NETZHAUT_DOCKER_HOST: 172.17.0.1

cache:
  paths:
    - "$MAVEN_LOCAL_REPO"

build_api:
  tags:
    - docker
  image: $MAVEN_IMAGE
  stage: build
  rules:
    # Run the job for a push to a branch that has an existing MR
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # Do not run the job for a branch that already has an existing MR, it will be run by the rule before.
    # This prevents duplicate runs for branches that have open MRs
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    # If we got here, there isn't an MR and we have simply pushed to a branch
    # Run the job for this push
    - if: $CI_COMMIT_BRANCH
    # Never run job for a pushed tag
    - if: $CI_COMMIT_TAG
      when: never
  script:
    - cd api
    - mvn compile $MAVEN_OPTS
  artifacts:
    paths:
      - target/
    expire_in: 30 min

test_api:
  tags:
    - docker
  image: docker:latest
  stage: test
  rules:
    # Run the job for a push to a branch that has an existing MR
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # Do not run the job for a branch that already has an existing MR, it will be run by the rule before.
    # This prevents duplicate runs for branches that have open MRs
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    # If we got here, there isn't an MR and we have simply pushed to a branch
    # Run the job for this push
    - if: $CI_COMMIT_BRANCH
    # Never run job for a pushed tag
    - if: $CI_COMMIT_TAG
      when: never
  script:
    - apk add --no-cache openjdk21-jre maven
    - docker compose -f mock-licence-servers/docker-compose.yml -p "$CI_JOB_ID" up --build --wait
    - cd api
    - mvn test $MAVEN_OPTS
    - mvn test -Dspring.profiles.active=local $MAVEN_OPTS
  after_script:
    - docker compose -f mock-licence-servers/docker-compose.yml -p "$CI_JOB_ID" down

test_lc_halt:
  tags:
    - docker
  image: ghcr.io/astral-sh/uv:python3.13-bookworm-slim
  stage: test
  services:
    - name: mongo:8.0
      alias: mongodb
      variables:
        MONGO_INITDB_ROOT_USERNAME: root
        MONGO_INITDB_ROOT_PASSWORD: password
        MONGO_INITDB_DATABASE: lchalt
  variables:
    UV_LINK_MODE: copy
    LC_HALT_CLIENT_API_KEY: "test-key"
    LC_HALT_ADMIN_API_KEY: "admin-key"
    MONGODB_URL: "mongodb://root:password@mongodb:27017/lchalt?authSource=admin"
  rules:
    # Run the job for a push to a branch that has an existing MR
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # Do not run the job for a branch that already has an existing MR, it will be run by the rule before.
    # This prevents duplicate runs for branches that have open MRs
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    # If we got here, there isn't an MR and we have simply pushed to a branch
    # Run the job for this push
    - if: $CI_COMMIT_BRANCH
    # Never run job for a pushed tag
    - if: $CI_COMMIT_TAG
      when: never
  before_script:
    - cd lc-halt
    - uv sync --locked --no-install-project --no-dev
  script:
    - uv run pytest

dockerize_api:
  tags:
    - docker
  image: $MAVEN_IMAGE
  stage: docker
  rules:
    # Never run the job for a pushed tag
    - if: $CI_COMMIT_TAG
      when: never
    # Only run the job for pushes to main
    - if: $CI_COMMIT_BRANCH == 'main'
  script:
    - cd api
    - mvn $MAVEN_CLI_OPTS spring-boot:build-image
      $MAVEN_OPTS
      -DskipTests=true
      -Ddocker.registry.username=gitlab-ci-token
      -Ddocker.registry.password=$CI_JOB_TOKEN
      -Ddocker.registry.url=$CI_REGISTRY
      -Dspring-boot.build-image.publish=true
      -Dspring-boot.build-image.imageName=$API_RELEASE_IMAGE

dockerize_lc_halt:
  tags:
    - docker
  image: docker:latest
  stage: docker
  rules:
    # Never run the job for a pushed tag
    - if: $CI_COMMIT_TAG
      when: never
    # Only run the job for pushes to main
    - if: $CI_COMMIT_BRANCH == 'main'
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker build -t $LC_HALT_RELEASE_IMAGE lc-halt
    - docker push $LC_HALT_RELEASE_IMAGE

deploy_api:
  stage: deploy
  rules:
    # Never run the job for a pushed tag
    - if: $CI_COMMIT_TAG
      when: never
    # Only run the job for pushes to main
    - if: $CI_COMMIT_BRANCH == 'main'
  variables:
    SSH_PARAMS: -o StrictHostKeyChecking=no
    SSH_USER_AND_HOST: docker@licence-connect-api.fwu.nhnbg
    SSH_EVAL: "ssh $SSH_PARAMS $SSH_USER_AND_HOST"
    SCP_EVAL: "scp $SSH_PARAMS"
    APP_DIR_ON_VM: /var/docker/apps/licenceconnect
  script:
    # Create the `/var/docker/apps/licenceconnect` directory on the VM if it does not exist yet
    - $SSH_EVAL "mkdir -p $APP_DIR_ON_VM"
    # log into the private registry on the VM
    - $SSH_EVAL "echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY"
    # pull the latest licenceconnect image on the VM
    - $SSH_EVAL "docker pull $API_RELEASE_IMAGE"
    # cd into the directory on the VM, stop and remove the containers, using the old docker-compose.yaml if it exists
    - $SSH_EVAL "cd $APP_DIR_ON_VM; LC_IMAGE=$API_RELEASE_IMAGE docker compose down"
    # Copy the (potentially) new version of `docker-compose.yaml` into the directory on the VM
    - $SCP_EVAL docker/docker-compose.yaml $SSH_USER_AND_HOST:$APP_DIR_ON_VM
    # Copy the (potentially) new version of the nginx directory (and its contents) into the directory on the VM
    - $SCP_EVAL -r docker/nginx $SSH_USER_AND_HOST:$APP_DIR_ON_VM
    # cd into the directory on the VM and start the containers using the (potentially) new docker-compose.yaml
    - $SSH_EVAL "cd $APP_DIR_ON_VM; LC_IMAGE=$API_RELEASE_IMAGE docker compose up -d --wait"
    # delete all dangling docker images on the VM
    - $SSH_EVAL "docker image prune -f"
